services:
    php:
        build:
            context: ./.docker/php
        container_name: library_php
        working_dir: /var/www/html
        volumes:
            - .:/var/www/html
        environment:
            - APP_ENV=dev
        depends_on:
            - db

    nginx:
        image: nginx:alpine
        container_name: library_nginx
        ports:
            - "8080:80"
        volumes:
            - .:/var/www/html
            - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - php

    db:
        image: mysql:8.0
        container_name: library_db
        restart: always
        environment:
            MYSQL_ROOT_USER: root
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: library
            MYSQL_USER: library
            MYSQL_PASSWORD: library
        ports:
            - "3306:3306"
        volumes:
            - db_data:/var/lib/mysql
            - ./.docker/db/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

###> doctrine/doctrine-bundle ###
#  database:
#    image: postgres:${POSTGRES_VERSION:-16}-alpine
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB:-app}
#      # You should definitely change the password in production
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
#      POSTGRES_USER: ${POSTGRES_USER:-app}
#    healthcheck:
#      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
#      timeout: 5s
#      retries: 5
#      start_period: 60s
#    volumes:
#      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
    db_data:

###> doctrine/doctrine-bundle ###
#  database_data:
###< doctrine/doctrine-bundle ###
